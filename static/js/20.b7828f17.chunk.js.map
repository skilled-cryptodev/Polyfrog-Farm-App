{"version":3,"sources":["utils/erc20.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/rug.png","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/Metamask.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","_account","_provider","setBalance","useAccount","ethereum","currentProvider","res","fetchBalance","StyledFarmStakingCard","styled","Card","Block","div","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","margin","size","mb","toFixed","id","disabled","length","onClick","UnlockButton","StyledCakeStats","Wrapper","Row","token","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","honestPerBlock","addWatchJaguarToken","window","request","method","type","options","symbol","image","console","log","marginTop","small","href","target","rel","width","src","rug","alt","marginLeft","StyledTotalValueLockedCard","TotalValueLockedCard","realValue","useTotalValue","TokenImageWrapper","CardImage","height","as","Cards","mediaQueries","lg","BaseLayout","sm","BannerContainer","BannerContent","BannerLink","Home","Cookies","Page","FarmStakingCard"],"mappings":"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","file":"static/js/20.b7828f17.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendinghonest',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({cakeBalance}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport {getLotteryAddress, getCakeAddress} from 'utils/addressHelpers'\nimport multicall from 'utils/multicall'\nimport erc20 from 'config/abi/erc20.json'\nimport useRefresh from './useRefresh'\n\n// const useTokenBalance = (tokenAddress: string) => {\n//   const [balance, setBalance] = useState(new BigNumber(0))\n//   const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n//   const { fastRefresh } = useRefresh()\n//\n//   useEffect(() => {\n//     const fetchBalance = async () => {\n//       const res = await getTokenBalance(ethereum, tokenAddress, account)\n//       setBalance(new BigNumber(res))\n//     }\n//\n//     if (account && ethereum) {\n//       fetchBalance()\n//     }\n//   }, [account, ethereum, tokenAddress, fastRefresh])\n//\n//   return balance\n// }\n\nconst useTokenBalance = (tokenAddress: string, _account?: string, _provider?: any) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account: useAccount, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n  const account = _account || useAccount;\n  const currentProvider = _provider || ethereum;\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(currentProvider, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && currentProvider) {\n      fetchBalance()\n    }\n  }, [account, currentProvider, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0xf43261d712cCa4aE55b34B77d9157e773254D1dF').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useLotteryLockedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const burnAddress = getLotteryAddress()\n      const [burnedCakeBalance] = await multicall(erc20, [\n        {\n          address: tokenAddress,\n          name: 'balanceOf',\n          params: [burnAddress],\n        },\n      ])\n\n      if (!burnedCakeBalance) return\n\n      setBalance(new BigNumber(burnedCakeBalance))\n    }\n\n    fetchBalance()\n  }, [slowRefresh, tokenAddress])\n\n  if (!balance) {\n    return new BigNumber(0)\n  }\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\nbackground-image: url('/images/egg/mod.png');\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n    min-width: 10%;\n  min-height: 10%;\n  width: 10%;\n  height: 100%;\n  center: right;\n  \n \n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const earningsSum = farmsWithBalance.reduce((accum, farm) => {\n    return accum + new BigNumber(farm.balance).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody margin={24}>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        \n        <Block>\n          <Label>Frog to Harvest</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>Frog in Wallet</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              \n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EGG')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton  />\n          )}\n        </Actions>\n        <Heading size=\"s\" mb=\"24px\">\n          ...\n        </Heading>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","export default __webpack_public_path__ + \"static/media/rug.b1b1103a.png\";","import React, {useCallback} from 'react'\nimport { Card, CardBody, Heading, Text, LinkExternal, Button } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, usePriceCakeBnb } from '../../../state/hooks'\nimport rug from  './rug.png'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  background-image: url('/images/egg/stats.png');\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n    min-width: 10%;\n  min-height: 10%;\n  width: 100%;\n  height: auto;\n  \n  \n  \n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 0px;\n  justify-content: 'space-between';\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst token = getCakeAddress();\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n  let honestPerBlock = 0;\n  const burnValue = eggPrice.times(burnedBalance);\n  const cakePrice = usePriceCakeBusd();\n  if(farms && farms[0] && farms[0].honestPerBlock){\n    honestPerBlock = new BigNumber(farms[0].honestPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  const addWatchJaguarToken = useCallback(async () => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const provider = window.ethereum\n    if (provider) {\n      try {\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n        const wasAdded = await provider.request({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: token,\n              symbol: 'honest',\n              decimals: '18',\n              image: '/logo.png',\n            },\n          },\n        })\n\n        if (wasAdded) {\n          console.log('Token was added')\n        }\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n  }, [])\n\n\n  return (\n    <StyledCakeStats>\n      <CardBody margin={24}>\n        <Heading size=\"xl\" mb=\"24px\">\n        Frog Stats\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">honest Price</Text>\n          <CardValue fontSize=\"14px\" value={eggPrice.toNumber()} decimals={2} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Total Supply</Text>\n          <Text bold fontSize=\"14px\">{getBalanceNumber(totalSupply)}</Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Circulating Supply</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Tokens to be farmed</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        \n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\"> Frog/block</Text>\n          <Text bold fontSize=\"14px\">{honestPerBlock}</Text>\n        </Row>\n        <Row style={{marginTop: '24px'}}>\n          <LinkExternal small href={`https://polygonscan.com/token/${token}`}>\n            {token}\n          </LinkExternal>\n        </Row>\n        <Wrapper>\n          <a href=\"https://rugdoc.io/project/honest-farms/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img width=\"155px\" src={rug} alt=\"rug\"/>\n          </a>\n          <Button onClick={addWatchJaguarToken} size=\"sm\">\n            + Add Frog to <img style={{ marginLeft: 8 }} width={16} src=\"https://jaguarswap.com/images/tokens/metamask.png\" alt=\"metamask logo\" />\n          </Button>\n          </Wrapper>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n\n\nbackground: linear-gradient(135deg, orange 60%, cyan);\nbackground-image: url('/images/egg/tvl.png');\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n    min-width: 10%;\n  min-height: 10%;\n  width: 10%;\n  height: 100%;\n  \n  align-items: center;\n  display: flex;\n  flex: 2;\n`\n\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  const tvl = totalValue.toNumber();\n  const realValue = tvl;\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={realValue} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">Across All Barns</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\nbackground-image: url('/images/egg/meta.png');\nbackground-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n \n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst TokenImageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 0px;\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  width: 100%;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 0px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst token = getCakeAddress();\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const FarmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = FarmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  const addWatchJaguarToken = useCallback(async () => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const provider = window.ethereum\n    if (provider) {\n      try {\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n        const wasAdded = await provider.request({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: token,\n              symbol: 'honest',\n              decimals: '18',\n              image: '/logo.png',\n            },\n          },\n        })\n\n        if (wasAdded) {\n          console.log('Token was added')\n        }\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n  }, [])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody margin={24}>\n        <Heading size=\"xl\" mb=\"24px\">\n          About Frog\n        </Heading>\n        <TokenImageWrapper>\n          <CardImage src=\"/images/egg/9.png\" alt=\"Farm honest logo\" width={60} height={60} />\n          <hr />\n          <Wrapper>\n            <Button as=\"a\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.gitbook.com/@honest-team/s/honestwork-farms/\" size=\"sm\">\n              Docs\n            </Button>\n            <Button as=\"a\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.gitbook.com/@honest-team/s/honestwork-farms/token/becoming-an-honest-farmer\" size=\"sm\">\n              Buy Now\n            </Button>\n          </Wrapper>\n        </TokenImageWrapper>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard","import React from 'react'\nimport styled from 'styled-components'\nimport Cookies from 'universal-cookie'\nimport { Image, Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport rot13 from '../../utils/encode'\n// import LotteryCard from './components/LotteryCard'\nimport { isAddress } from '../../utils/web3'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport EarnAPRCard from './components/EarnAPRCard'\nimport EarnAssetCard from './components/EarnAssetCard'\nimport WinCard from './components/WinCard'\nimport MetaMask from './components/Metamask'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/3a.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 50px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/home.png');\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n    min-width: 10%;\n    min-height: 10%;\n    width: 100%;\n    height: 10%;\n\n    align-items: center;\n    display: flex;\n    flex: 1;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 72px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst BannerContainer = styled.div`\n  background: #e78d45;\n  border-radius: 24px;\n  padding: 12px;\n  margin: 24px;\n`\n\nconst BannerContent = styled.div`\n  margin: 0 auto;\n  text-align: center;\n  padding: 24px;\n`\n\nconst BannerLink = styled.a`\n  color: #fff;\n  margin: 24px 0px;\n  text-align: center;\n  font-size: 18px;\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n  const cookies = new Cookies()\n  const aint = \"It ain't much but it's Honest Work\"\n\n  return (\n    <Page>\n      <BannerContainer>\n        <BannerContent>\n          <BannerLink href=\"https://polygonscan.com/block/16605000\">\n            <u>Click here To get the countdown until farming starts</u>\n          </BannerLink>\n        </BannerContent>\n      </BannerContainer>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <CakeStats />\n        </Cards>\n        <Cards>\n          <TotalValueLockedCard />\n          <MetaMask />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}