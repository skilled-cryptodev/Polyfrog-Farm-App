{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","components/layout/Page.tsx","components/layout/Container.tsx","contexts/BlockContext.tsx","config/constants/types.ts","utils/multicall.ts","config/constants/pools.ts","config/constants/contracts.ts","utils/addressHelpers.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","honestPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePools","fastRefresh","fetchPoolsUserDataAsync","pools","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","usePriceWethBusd","i","length","val","BNB","CAKE","plus","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","ultra","RefreshContextProvider","children","useState","setSlow","setFast","setUltra","interval","setInterval","prev","clearInterval","Provider","useContext","ultraRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","Page","styled","Container","theme","mediaQueries","sm","lg","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getWeb3","eth","getBlockNumber","blockNumber","current","PoolCategory","abi","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","sousId","tokenName","stakingTokenName","HONEST","stakingTokenAddress","contractAddress","rewardTokenAddress","poolCategory","COMMUNITY","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","burnFee","weeklyroi","cake","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","usdt","weth","forest","getCakeAddress","addresses","chainId","getLotteryAddress","getLotteryTicketAddress","getForestAddress","nonBnbPools","filter","p","bnbPools","fetchPoolsAllowance","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","cakePools","sousChefABI","cakeUserInfo","amount","fetchUserPendingRewards","poolsConfig","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","stakingTokenBalances","stakedBalances","pendingRewards","stakingTokenBalance","pendingReward","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","GlobalStyle","createGlobalStyle","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","Pools","Ifos","NotFound","Trade","Liquidity","Launchpad","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","tokenMode","component","memo","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.2dd2f6ce.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n    \n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if (farmConfig.isTokenOnly) {\n      //     console.log('here2',\n      //   tokenDecimals,farmConfig\n      // )\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(6));\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(6))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, honestPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'honestPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        honestPerBlock: new BigNumber(honestPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendinghonest',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 1 // matic-usdc LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBnb = (): BigNumber => {\n  const pid = 2 // honest-Matic LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0; // honest-USDC LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const usePriceWethBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 5; // WETH-BUSD LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  const wethPrice = usePriceWethBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }\n      // else if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n      //  val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      // }\n      else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n\n    }\n  }\n  return value;\n}","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst ULTRA_INTERVAL = 3000\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0, ultra: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n  const [ultra, setUltra] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setUltra((prev) => prev + 1)\n    }, ULTRA_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast, ultra }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { ultra, fast, slow } = useContext(RefreshContext)\n  return { ultraRefresh: ultra, fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'USDT' = 'USDT',\n  'WETH' = 'WETH',\n  'HONEST' = 'HONEST',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n  137?: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: Address\n  contractAddress: Address\n  rewardTokenAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n  burnFee: number\n  weeklyroi: string\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import { PoolCategory, PoolConfig, QuoteToken } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0x9FcA113B2D4E64462229E107A8F4Aa7359D055F5',\n  //     56: '0xfC2BA5B6Ec7A5Fe68546fC8fB55A915b5CA5E261', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xed24fc36d5ee211ea25a80239fb8c4cfd80f12ee', // BUSD, didnt find CAKE\n  //     56: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', // CAKE\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.00295',\n  //   sortOrder: 1,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 0,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'WBNB',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0x8eAFF0bF4C7e8a9aA3cFe13e2B4533D23251fdaF', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI, didnt had WBNB\n  //     56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', // WBNB\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://binance.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.0001736111111',\n  //   sortOrder: 2,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 0,\n  // },\n  // {\n  //   sousId: 2,\n  //   tokenName: 'SLME',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0xFC4A74E326F34dA2954F8B0De39A759e14B5472f', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI, didnt had SLIME\n  //     56: '0x4fcfa6cc8914ab455b5b33df916d90bfe70b6ab1', // SLIME\n  //   },\n  //   poolCategory: PoolCategory.COMMUNITY,\n  //   projectLink: 'https://slime.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.00496031746',\n  //   sortOrder: 3,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 0,\n  // },\n  // {\n  //   sousId: 3,\n  //   tokenName: 'BUSD',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0x1495989d4592c7e94fe1E9448A172894f179956E', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56', // BUSD\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://binance.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.694',\n  //   sortOrder: 4,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 0,\n  // },\n  // {\n  //   sousId: 4,\n  //   tokenName: 'EGG',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0x2974b4aECbEc5FFEA565E7Ef47395429f44D0c81', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\n  //     56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6', // EGG\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://goosedefi.com',\n  //   harvest: true,\n  //   tokenPerBlock: '0.002624734287',\n  //   sortOrder: 5,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 0,\n  // },\n  // {\n  //   sousId: 5,\n  //   tokenName: 'BREW',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0x88d2fb892c9577Ecb542EF6860AF13524e668b02', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\n  //     56: '0x790be81c3ca0e53974be2688cdb954732c9862e1', // BREW\n  //   },\n  //   poolCategory: PoolCategory.COMMUNITY,\n  //   projectLink: 'https://cafeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.005006944444',\n  //   sortOrder: 6,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 0,\n  // },\n  // {\n  //   sousId: 6,\n  //   tokenName: 'BUSD',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0x36e3BC1E58B409160A191784E21327ACA6AcBc5C', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56', // BUSD\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://binance.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.3863194444',\n  //   sortOrder: 7,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 5,\n  // },\n  // {\n  //   sousId: 7,\n  //   tokenName: 'BTCB',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0xe2f75e1e327331c41a206D187f4D08F75FA9bF17', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\n  //     56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c', // BTCB\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://binance.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.000006944444444',\n  //   sortOrder: 8,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 5,\n  // },\n  // {\n  //   sousId: 8,\n  //   tokenName: 'CTC',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0xa0286abcdf5ac136cdbea4fecea0f83c093e5107',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xFD8fa2A7a5DebB757C1CDe08B113DF395A774160', // test ctc\n  //     56: '0x85f27A63cFb4Dc5a36d7Eb5EF8620D343817e156', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xAA8Af527961533Ba61CeF965ED750060d459a918', // FAKECTC\n  //     56: '0xb7F80a74aaA4FD30a3EE7C03FDe3DC88e6002C12', // CTC\n  //   },\n  //   poolCategory: PoolCategory.COMMUNITY,\n  //   projectLink: 'https://www.cryptocoinctc.org/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.8680538',\n  //   sortOrder: 9,\n  //   isFinished: true,\n  //   tokenDecimals: 8,\n  //   burnFee: 0,\n  // },\n  // {\n  //   sousId: 9,\n  //   tokenName: 'BUSD',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0xc44E823f72f6d038BC255cD82A48B3942B00c2Ef', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56', // BUSD\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://binance.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.1736111111',\n  //   sortOrder: 10,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 10,\n  // },\n  // {\n  //   sousId: 10,\n  //   tokenName: 'CTC',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0xa0286abcdf5ac136cdbea4fecea0f83c093e5107',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xFD8fa2A7a5DebB757C1CDe08B113DF395A774160', // test ctc\n  //     56: '0xf1eFc9e49EB1805AEd72917a0479bddFB5560d32', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xAA8Af527961533Ba61CeF965ED750060d459a918', // FAKECTC\n  //     56: '0xb7F80a74aaA4FD30a3EE7C03FDe3DC88e6002C12', // CTC\n  //   },\n  //   poolCategory: PoolCategory.COMMUNITY,\n  //   projectLink: 'https://www.cryptocoinctc.org/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.8680538',\n  //   sortOrder: 11,\n  //   isFinished: true,\n  //   tokenDecimals: 8,\n  //   burnFee: 0,\n  // },\n  // {\n  //   sousId: 11,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0x9FcA113B2D4E64462229E107A8F4Aa7359D055F5',\n  //     56: '0x0A30d83b4396F34b25EB1956a79FabB5d3BaB931', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xed24fc36d5ee211ea25a80239fb8c4cfd80f12ee', // BUSD, didnt find CAKE\n  //     56: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', // CAKE\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.003681388889',\n  //   sortOrder: 12,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 15,\n  // },\n  // {\n  //   sousId: 12,\n  //   tokenName: 'WBNB',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0xA5e2C1ABc73F411180e0a2371a3A546B402A96F9', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI, didnt had WBNB\n  //     56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', // WBNB\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://binance.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.00005541666667',\n  //   sortOrder: 13,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 15,\n  // },\n  // {\n  //   sousId: 13,\n  //   tokenName: 'BLUE',\n  //   stakingTokenName: QuoteToken.SALTBLUE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0xc7953f27b4b7049e41c3c10354e995870cb8e109', // CAKE-BLUE\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0xdF62141c12f54B17B7e6F158eD36629856E74C97', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI, didnt had WBNB\n  //     56: '0x36C0556c2B15aED79F842675Ff030782738eF9e8', // BLUE\n  //   },\n  //   poolCategory: PoolCategory.COMMUNITY,\n  //   projectLink: 'https://blueswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.005787037037',\n  //   sortOrder: 14,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 0,\n  // },\n  // {\n  //   sousId: 14,\n  //   tokenName: 'SLME',\n  //   stakingTokenName: QuoteToken.SALTSLME,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0xbea4674a61cccc6b735999511ba9a8ba3aa26a85', // CAKE-slime\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0xD4A55D437Da5753da2f937518Fd797f5d2211E1c', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI, didnt had SLIME\n  //     56: '0x4fcfa6cc8914ab455b5b33df916d90bfe70b6ab1', // SLIME\n  //   },\n  //   poolCategory: PoolCategory.COMMUNITY,\n  //   projectLink: 'https://slime.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '.002899305556',\n  //   sortOrder: 15,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 30,\n  // },\n  // {\n  //   sousId: 15,\n  //   tokenName: 'BUSD',\n  //   stakingTokenName: QuoteToken.SALTBUSD,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x6596f770786915556C47E301cC8290aa14288d99', // CAKE-BUSD\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0x94fcecEdBe1050d079c60b1EDeb1D4D16B3BF76C', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56', // BUSD\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://binance.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.01261865625',\n  //   sortOrder: 16,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 100,\n  // },\n  // {\n  //   sousId: 16,\n  //   tokenName: 'MOMO',\n  //   stakingTokenName: QuoteToken.SALTMOMO,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2e63a08ca1ab08a3f1eb0ca0d3f0a1a4278dfa8f', // CAKE-MOMO\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0xb72893D5ABFce5940F3f8F401eFCdb2A95E5f7c7', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\n  //     56: '0xafb2997fe9a99022e61c7e01b974e0e3d7704b02', // MOMO\n  //   },\n  //   poolCategory: PoolCategory.COMMUNITY,\n  //   projectLink: 'https://momoprotocol.finance/#/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.01157407407',\n  //   sortOrder: 16,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  //   burnFee: 5,\n  // },\n  // {\n  //   sousId: 17,\n  //   tokenName: 'PALM',\n  //   stakingTokenName: QuoteToken.SALTPALM,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x34951e9ca4891b4264a6cb9850e0b85a850414e5', // CAKE-PALM\n  //   },\n  //   contractAddress: {\n  //     97: '0xF08d05d91426A63aB35Ef7f4bBC6E8717B59e838',\n  //     56: '0x42187c7eada603198165c2B95EA237865036BEd1', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867', // DAI\n  //     56: '0x9768E5b2d8e761905BC81Dfc554f9437A46CdCC6', // PALM\n  //   },\n  //   poolCategory: PoolCategory.COMMUNITY,\n  //   projectLink: 'https://yieldbay.finance',\n  //   harvest: true,\n  //   tokenPerBlock: '0.00744047619',\n  //   sortOrder: 16,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 10,\n  // },\n  // {\n  //   sousId: 18,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4', // CAKE\n  //   },\n  //   contractAddress: {\n  //     97: '0x9FcA113B2D4E64462229E107A8F4Aa7359D055F5',\n  //     56: '0x59f2B754944e78f849E03db39273da9251ADbF0E', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xed24fc36d5ee211ea25a80239fb8c4cfd80f12ee', // BUSD, didnt find CAKE\n  //     56: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', // CAKE\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.001191340278',\n  //   sortOrder: 17,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 15,\n  // },\n  // {\n  //   sousId: 19,\n  //   tokenName: 'MCH',\n  //   stakingTokenName: QuoteToken.SALTMCH,\n  //   stakingTokenAddress: {\n  //     97: '0x85582d24455caaf44fc4f914bdca2a6cb73e6681',\n  //     56: '0xf09a33f69c7f9a19f87c53469b52665ec4e1c97b', // CAKE-MCH\n  //   },\n  //   contractAddress: {\n  //     97: '0x9FcA113B2D4E64462229E107A8F4Aa7359D055F5',\n  //     56: '0x01c1e411D447e9d18D95C05408A7e765Ec308D48', // SmartChef\n  //   },\n  //   rewardTokenAddress: {\n  //     97: '0xed24fc36d5ee211ea25a80239fb8c4cfd80f12ee', // BUSD, didnt find CAKE\n  //     56: '0x46483f3a766ae2c0c811ff953ac3dc69a3a20968', // MCH\n  //   },\n  //   poolCategory: PoolCategory.COMMUNITY,\n  //   projectLink: 'https://magnifico-chef-git-main-chefmagnifico.vercel.app/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.0162037037',\n  //   sortOrder: 18,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  //   burnFee: 10,\n  // },\n  {\n    sousId: 20,\n    tokenName: 'WMATIC',\n    stakingTokenName: QuoteToken.HONEST,\n    stakingTokenAddress: {\n      137: '0xF4B0903774532AEe5ee567C02aaB681a81539e92',\n      97: '',\n      56: '', // honest\n    },\n    contractAddress: {\n      137: '0x5ED37920412415B1d2F0F25e44776F0BE709B4e3',\n      97: '',\n      56: '', // SmartChef\n    },\n    rewardTokenAddress: {\n      137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n      97: '', // DAI, didnt had WBNB\n      56: '', // WMATIC\n    },\n    poolCategory: PoolCategory.COMMUNITY,\n    projectLink: 'https://polygon.technology/',\n    harvest: true,\n    tokenPerBlock: '0.0165343915343915',\n    sortOrder: 1,\n    isFinished: false,\n    tokenDecimals: 18,\n    burnFee: 100,\n    weeklyroi: '~ 60%'\n  }, \n  \n]\n\nexport default pools\n","export default {\n  cake: {\n    56: '0x4dA646B71014332AE8370017d05205346d3ca50A',\n    97: '',\n    137: '0x4dA646B71014332AE8370017d05205346d3ca50A', // honest\n  },\n  masterChef: {\n    56: '0xf43261d712cCa4aE55b34B77d9157e773254D1dF',\n    97: '',\n    137: '0xf43261d712cCa4aE55b34B77d9157e773254D1dF' \n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '',\n    137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270' // WMATIC\n  },\n\n  \n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n    137: '0x95028E5B8a734bb7E2071F96De89BABe75be9C8E',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n    137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174' // USDC\n  },\n  usdt: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n    137: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F' // USDT\n  },\n  weth: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n    137: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619' // WETH\n  },\n  forest: {\n    56: '',\n    97: '',\n    137: '0x4b17699c4990265D35875C15D5377571159f6bfd'\n  },\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n\nexport const getForestAddress = () => {\n  return addresses.forest[chainId]\n}","import pools from 'config/constants/pools'\nimport erc20ABI from 'config/abi/erc20.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = pools.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = pools.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst web3 = getWeb3()\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress[CHAIN_ID],\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress[CHAIN_ID],\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const cakePools = pools\n  const cakeUserInfo = await multicall(\n    sousChefABI,\n    cakePools.map((p) => ({\n      address: p.contractAddress[CHAIN_ID],\n      name: 'userInfo',\n      params: [account],\n    })),\n  )\n\n  return {\n    ...pools.reduce(\n      (acc, pool, index) => ({\n        ...acc,\n        [pool.sousId]: new BigNumber(cakeUserInfo[index]?.amount._hex).toJSON(),\n      }),\n      {},\n    ),\n  }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const cakePools = pools\n  const res = await multicall(\n    sousChefABI,\n    cakePools.map((p) => ({\n      address: p.contractAddress[CHAIN_ID],\n      name: 'pendingReward',\n      params: [account],\n    })),\n  )\n\n  return {\n    ...pools.reduce(\n      (acc, pool, index) => ({\n        ...acc,\n        [pool.sousId]: new BigNumber(res[index]).toJSON(),\n      }),\n      {},\n    ),\n  }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStaking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index]?.userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStaking()\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    isTokenOnly: false,\n    lpSymbol: 'HONEST - USDC',\n    lpAddresses: {\n      97: '',\n      56: '0x34Eee3A617e783ADe7340adb37dBb85b90477070',\n      137: '0x34Eee3A617e783ADe7340adb37dBb85b90477070',\n    },\n    tokenSymbol: 'HONEST',\n    tokenAddresses: {\n      97: '',\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n      137: '0x4dA646B71014332AE8370017d05205346d3ca50A',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n\n  {\n    pid: 1,\n    risk: 3,\n    lpSymbol: 'WMATIC - USDC',\n    lpAddresses: {\n      97: '',\n      56: '0x6e7a5FAFcec6BB1e78bAE2A1F0B612012BF14827',\n      137: '0x6e7a5FAFcec6BB1e78bAE2A1F0B612012BF14827', // WMATIC - USDC\n    },\n    tokenSymbol: 'WMATIC',\n    tokenAddresses: {\n      97: '',\n      56: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n      137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', // WMATIC\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  /*  {\n    pid: 2,\n    risk: 5,\n    isTokenOnly: false,\n    lpSymbol: 'HONEST - MATIC',\n    lpAddresses: {\n      97: '',\n      56: '0xc02B405EED5fe43d00886622f1a3C046e4de1792',\n      137: '0xc02B405EED5fe43d00886622f1a3C046e4de1792',\n    },\n    tokenSymbol: 'HONEST-MATIC',\n    tokenAddresses: {\n      97: '',\n      56: '0x4dA646B71014332AE8370017d05205346d3ca50A',\n      137: '0x4dA646B71014332AE8370017d05205346d3ca50A',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  }, */\n  {\n    pid: 3,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'HONEST',\n    lpAddresses: {\n      97: '',\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\n      137: '0x34Eee3A617e783ADe7340adb37dBb85b90477070',\n    },\n    tokenSymbol: 'HONEST',\n    tokenAddresses: {\n      97: '',\n      56: '0x4dA646B71014332AE8370017d05205346d3ca50A',\n      137: '0x4dA646B71014332AE8370017d05205346d3ca50A',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 4,\n    risk: 3,\n    lpSymbol: 'DAI - USDC',\n    lpAddresses: {\n      97: '',\n      56: '0xf04adBF75cDFc5eD26eeA4bbbb991DB002036Bdd',\n      137: '0xf04adBF75cDFc5eD26eeA4bbbb991DB002036Bdd', // WMATIC - USDC\n    },\n    tokenSymbol: 'DAI',\n    tokenAddresses: {\n      97: '',\n      56: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n      137: '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063', // WMATIC\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n\n  {\n    pid: 5,\n    risk: 5,\n    isTokenOnly: false,\n    lpSymbol: 'WETH - USDC',\n    lpAddresses: {\n      97: '',\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\n      137: '0x853ee4b2a13f8a742d64c8f088be7ba2131f670d',\n    },\n    tokenSymbol: 'WETH',\n    tokenAddresses: {\n      97: '',\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n      137: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: 'IntroRustG';\n    src: url('font.ttf') format('truetype');\n  }\n\n  * {\n    font-family: 'IntroRustG';\n  }\n  body {\n    background-color: #4aa58e;\n    background-repeat: no-repeat;\n    background-size: cover;\n    min-width: 100%;\n  min-height: 100%;\n  width: 100%;\n  height: auto;\n    \n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n  nav > div:first-child {\n    align-items: center;\n  }\n  nav a > svg:last-child {\n    width: 400px !important;\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Buy',\n        href: 'https://quickswap.exchange/#/swap?outputCurrency=0x4da646b71014332ae8370017d05205346d3ca50a',\n      },\n      {\n        label: 'Liquidity',\n        href:\n          'https://quickswap.exchange/#/add/0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174/0x4da646b71014332ae8370017d05205346d3ca50a',\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'Barn',\n    icon: 'PoolIcon',\n    href: '/pools',\n  },\n\n  {\n    label: 'NFT Marketplace',\n    icon: 'NftIcon',\n    href: '/nft',\n  },\n\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'QuickSwap Chart',\n        href: 'https://info.quickswap.exchange/token/0x4dA646B71014332AE8370017d05205346d3ca50A',\n      },\n      {\n        label: 'Polygon Explorer',\n        href: 'https://polygonscan.com/token/0x4dA646B71014332AE8370017d05205346d3ca50A',\n      },\n      {\n        label: 'honest Chart',\n        href: 'https://quickchart.app/token/0x4dA646B71014332AE8370017d05205346d3ca50A',\n      },\n    ],\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Github',\n        href: 'https://github.com/HonestWorkFarm/',\n      },\n      {\n        label: 'Blog',\n        href: 'https://medium.com/@honestwork',\n      },\n      {\n        label: 'Docs',\n        href: 'https://app.gitbook.com/@honest-team/s/honestwork-farms/',\n      },\n    ],\n  },\n  {\n    label: 'GMO HARVESTS',\n    icon: 'RoadmapIcon',\n    href: 'https://app.gitbook.com/@honest-team/s/honestwork-farms/token/farm-pumpamentals',\n  },\n  {\n    label: 'Collab',\n    icon: 'HandshakeIcon',\n    href: 'https://t.me/honestworkfarms',\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n     \n      \n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd}\n      links={config}\n      priceLink=\"https://quickchart.app/token/0x4dA646B71014332AE8370017d05205346d3ca50A\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS, Image } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\nconst Pools = lazy(() => import('./views/Pools'))\nconst Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\nconst Buy = lazy(() => import('./views/Buy'))\nconst Trade = lazy(() => import('./views/BuyNow'))\nconst Liquidity = lazy(() => import('./views/Liquidity'))\nconst Launchpad = lazy(() => import('./views/Teaser'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/pools\">\n              <Farms tokenMode />\n            </Route>\n            <Route path=\"/kitchenpools\">\n              <Pools />\n            </Route>\n            <Route path=\"/buy\">\n              <Trade />\n            </Route>\n            <Route path=\"/liquidity\">\n              <Liquidity />\n            </Route>\n            <Route path=\"/ido\">\n              <Ifos />\n            </Route>\n            <Route path=\"/nft\">\n              <Launchpad />\n            </Route>\n\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nconst isAddress = (address: string) => {\n  return Web3.utils.isAddress(address)\n}\n\nexport { getWeb3, getContract, httpProvider, isAddress }\n"],"sourceRoot":""}