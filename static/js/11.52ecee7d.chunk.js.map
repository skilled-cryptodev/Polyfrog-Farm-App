{"version":3,"sources":["components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useStake.ts","components/Tags.tsx","utils/getLiquidityUrlPathParts.ts","utils/erc20.ts","config/index.ts","hooks/useApprove.ts","hooks/useUnstake.ts","utils/compoundApyHelpers.ts","components/layout/Flex.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","BigNumber","times","toString","useSmartStake","sousId","isUsingBnb","dispatch","useDispatch","useWallet","account","smartChefContract","useSmartChef","handleStake","useCallback","amount","a","stakeFn","smartStakeBnb","smartStake","updateUserStakedBalance","String","updateUserBalance","onStake","useStake","pid","masterChefContract","useMasterchef","stake","txHash","fetchFarmUserDataAsync","console","info","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","methods","balanceOf","call","balance","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","useApprove","lpContract","onApprove","approve","tx","useSousApprove","updateUserAllowance","useSmartUnstake","onUnstake","smartChefUnstake","updateUserPendingReward","useUnstake","unstake","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","FlexLayout","Wrapper","Flex","MultiplierTag","Tag","CardHeading","lpLabel","multiplier","farmImage","risk","tokenSymbol","depositFee","justifyContent","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","color","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","isTokenOnly","useFarmUser","allowance","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","handleApprove","error","bold","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","liquidityUrlPathParts","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","href","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","FarmCard","expanded","removed","bnbPrice","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","honestPerBlock","poolWeight","pow","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/11.52ecee7d.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, smartStakeBnb, smartStake } from 'utils/callHelpers'\nimport { useMasterchef, useSmartChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\n\nexport const useSmartStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const stakeFn = isUsingBnb ? smartStakeBnb : smartStake\n      await stakeFn(smartChefContract, amount, account)\n      dispatch(updateUserStakedBalance(String(sousId), account))\n      dispatch(updateUserBalance(String(sousId), account))\n    },\n    [account, dispatch, isUsingBnb, smartChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(0.5)\nexport const BLOCKS_PER_YEAR = new BigNumber(15768000)\nexport const BSC_BLOCK_TIME = 2\n\nexport const CAKE_POOL_PID = 1\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useLottery, useSmartChef, useForest } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId: number) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, smartChefContract, account)\n      dispatch(updateUserAllowance(String(sousId), account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, smartChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve the forest\nexport const useForestApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const forestContract = useForest()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, forestContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, forestContract])\n\n  return { onApprove: handleApprove }\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, smartChefUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSmartChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSmartUnstake = (sousId: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const smartChefContract = useSmartChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await smartChefUnstake(smartChefContract, amount, account)\n      dispatch(updateUserStakedBalance(String(sousId), account))\n      dispatch(updateUserBalance(String(sousId), account))\n      dispatch(updateUserPendingReward(String(sousId), account))\n    },\n    [account, dispatch, smartChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, RiskTag, NoFeeTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          Honest\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Honest per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\nalign-self: baseline;\nbackground-image: url('/images/egg/farmcard.gif');\nbackground-size: cover;\n\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'HONEST'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'HONEST' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n   \n    \n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\nimport fib from './fib.png'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter(\n    (farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.pid !== 8,\n  )\n  const inactiveFarms = farmsLP.filter(\n    (farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.pid !== 8,\n  )\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      // let userTotalTVL = new BigNumber(0);\n      // let userAllowance = 0;\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.honestPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n        // if (farm.userData) {\n        //   const userShare = new BigNumber(farm.userData.stakedBalance).div(1000000000000000000).multipliedBy(farm.tokenPriceVsQuote)\n        //   userTotalTVL = userTotalTVL.plus(userShare)\n        //   const userWL = Whitelist.find(add => add.wallet === account);\n        //   userAllowance = userWL.allowance\n        // }\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {tokenMode ? 'Stake tokens to earn honest' : 'Stake LP tokens to earn honest'}\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n              COMING SOON...\n            </Heading> */}\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n              COMING SOON...\n            </Heading> */}\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}